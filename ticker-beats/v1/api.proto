// Copyright 2021 Sander Ruscigno
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package tickerbeats.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "account.proto";
import "order.proto";
import "deal.proto";
import "position.proto";
import "tradetransaction.proto";
import "signal.proto";


message PagedRequestOptions {
  // cursor can be passed to retrieve the next page of results keyed by the cursor
  int64  cursor = 1;
  // page_size specifies the number of items to return in the next page
  int64 page_size = 2;
}

message PagedResponseMetadata {
  // A cursor that can be provided to retrieve the next page of results
  int64  next_cursor = 1;
  // Whether or not more results exist
  bool has_more = 2;
}

// *******************
// Requests
// *******************
message CreateAccountRequest {
    Account account = 1;
}

message CreateDealsRequest {
    repeated Deal deals = 1;
}

message CreateOrdersRequest {
    repeated Order orders = 1;
}

message CreatePositionsRequest {
             int64    server_time = 1;
    repeated Position positions   = 2;
             int64    account_id  = 3;
}

message CreateTradeTransactionRequest {
    int64            account_id        = 1;
    int64            creation_order    = 2;
    int64            server_time       = 3;
    TradeTransaction trade_transaction = 4;
    TradeRequest     trade_request     = 5;
    TradeResult      trade_result      = 6;
}

message TickerBeatsRequest {
    int64      account_id    = 1;
    int64      server_time   = 2;
    SignalType signal_type   = 3;
    int64      last_order_id = 4;
}

message TickerBeatsConfirmationRequest {
    int64 account_id   = 1;
    int64 server_time  = 2;
    int64 beats_id     = 3;
}

// *******************
// Response
// *******************
message TradeBeats {
           Signal       signal           = 1;
           int64        expiration_time  = 2;
  repeated Position     positions        = 3;
  repeated Order        orders           = 4;
  repeated TradeRequest trade_request    = 5;
}

message TickerBeatsResponse {
  repeated TradeBeats beats            = 1;
}

// *******************
// Services
// *******************

// Service for TickerBeatsService Microservice
service TickerBeatsService {
  rpc GetTickerBeats (TickerBeatsRequest) returns (TickerBeatsResponse);
  rpc ConfirmBeatsTransaction (TickerBeatsConfirmationRequest) returns (google.protobuf.Empty);
}

// Service for TickerBeatsService Microservice
service TransactionsService {
  // Creates a new account
  rpc CreateAccount (CreateAccountRequest) returns (google.protobuf.Empty);
  // Creates a new deal
  rpc CreateDeals (CreateDealsRequest) returns (google.protobuf.Empty);
  // Creates a new order
  rpc CreateOrders (CreateOrdersRequest) returns (google.protobuf.Empty);
  // Creates a new position
  rpc CreatePositions (CreatePositionsRequest) returns (google.protobuf.Empty);
  // Creates a trade transation
  rpc CreateTradeTransaction(CreateTradeTransactionRequest) returns (google.protobuf.Empty);
}
