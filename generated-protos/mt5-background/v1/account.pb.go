// Code generated by protoc-gen-go. DO NOT EDIT.
// source: account.proto

package mql5_background_v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// AccountTradeMode represents the modes an account could have
type AccountTradeMode int32

const (
	AccountTradeMode_ACCOUNT_TRADE_MODE_DEMO    AccountTradeMode = 0
	AccountTradeMode_ACCOUNT_TRADE_MODE_CONTEST AccountTradeMode = 1
	AccountTradeMode_ACCOUNT_TRADE_MODE_REAL    AccountTradeMode = 2
)

var AccountTradeMode_name = map[int32]string{
	0: "ACCOUNT_TRADE_MODE_DEMO",
	1: "ACCOUNT_TRADE_MODE_CONTEST",
	2: "ACCOUNT_TRADE_MODE_REAL",
}

var AccountTradeMode_value = map[string]int32{
	"ACCOUNT_TRADE_MODE_DEMO":    0,
	"ACCOUNT_TRADE_MODE_CONTEST": 1,
	"ACCOUNT_TRADE_MODE_REAL":    2,
}

func (x AccountTradeMode) String() string {
	return proto.EnumName(AccountTradeMode_name, int32(x))
}

func (AccountTradeMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e28828dcb8d24f0, []int{0}
}

// AccountStopoutMode: Mode for setting the minimal allowed margin
type AccountStopoutMode int32

const (
	AccountStopoutMode_ACCOUNT_STOPOUT_MODE_PERCENT AccountStopoutMode = 0
	AccountStopoutMode_ACCOUNT_STOPOUT_MODE_MONEY   AccountStopoutMode = 1
)

var AccountStopoutMode_name = map[int32]string{
	0: "ACCOUNT_STOPOUT_MODE_PERCENT",
	1: "ACCOUNT_STOPOUT_MODE_MONEY",
}

var AccountStopoutMode_value = map[string]int32{
	"ACCOUNT_STOPOUT_MODE_PERCENT": 0,
	"ACCOUNT_STOPOUT_MODE_MONEY":   1,
}

func (x AccountStopoutMode) String() string {
	return proto.EnumName(AccountStopoutMode_name, int32(x))
}

func (AccountStopoutMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e28828dcb8d24f0, []int{1}
}

// AccountStopoutMode: Margin calculation mode
type AccountMarginMode int32

const (
	AccountMarginMode_ACCOUNT_MARGIN_MODE_RETAIL_NETTING AccountMarginMode = 0
	AccountMarginMode_ACCOUNT_MARGIN_MODE_EXCHANGE       AccountMarginMode = 1
	AccountMarginMode_ACCOUNT_MARGIN_MODE_RETAIL_HEDGING AccountMarginMode = 3
)

var AccountMarginMode_name = map[int32]string{
	0: "ACCOUNT_MARGIN_MODE_RETAIL_NETTING",
	1: "ACCOUNT_MARGIN_MODE_EXCHANGE",
	3: "ACCOUNT_MARGIN_MODE_RETAIL_HEDGING",
}

var AccountMarginMode_value = map[string]int32{
	"ACCOUNT_MARGIN_MODE_RETAIL_NETTING": 0,
	"ACCOUNT_MARGIN_MODE_EXCHANGE":       1,
	"ACCOUNT_MARGIN_MODE_RETAIL_HEDGING": 3,
}

func (x AccountMarginMode) String() string {
	return proto.EnumName(AccountMarginMode_name, int32(x))
}

func (AccountMarginMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e28828dcb8d24f0, []int{2}
}

// AccountInfo: Account Properties
type Account struct {
	AccountId            int32              `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Login                int32              `protobuf:"varint,2,opt,name=login,proto3" json:"login,omitempty"`
	TradeMode            AccountTradeMode   `protobuf:"varint,3,opt,name=trade_mode,json=tradeMode,proto3,enum=mql5_background.v1.AccountTradeMode" json:"trade_mode,omitempty"`
	Leverage             int32              `protobuf:"varint,4,opt,name=leverage,proto3" json:"leverage,omitempty"`
	MarginMode           AccountMarginMode  `protobuf:"varint,5,opt,name=margin_mode,json=marginMode,proto3,enum=mql5_background.v1.AccountMarginMode" json:"margin_mode,omitempty"`
	StopoutMode          AccountStopoutMode `protobuf:"varint,6,opt,name=stopout_mode,json=stopoutMode,proto3,enum=mql5_background.v1.AccountStopoutMode" json:"stopout_mode,omitempty"`
	TradeAllowed         bool               `protobuf:"varint,7,opt,name=trade_allowed,json=tradeAllowed,proto3" json:"trade_allowed,omitempty"`
	TradeExpert          bool               `protobuf:"varint,8,opt,name=trade_expert,json=tradeExpert,proto3" json:"trade_expert,omitempty"`
	LimitOrders          int32              `protobuf:"varint,9,opt,name=limit_orders,json=limitOrders,proto3" json:"limit_orders,omitempty"`
	Name                 string             `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Server               string             `protobuf:"bytes,11,opt,name=server,proto3" json:"server,omitempty"`
	Currency             string             `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	Company              string             `protobuf:"bytes,13,opt,name=company,proto3" json:"company,omitempty"`
	Balance              float64            `protobuf:"fixed64,14,opt,name=balance,proto3" json:"balance,omitempty"`
	Credit               float64            `protobuf:"fixed64,15,opt,name=credit,proto3" json:"credit,omitempty"`
	Profit               float64            `protobuf:"fixed64,16,opt,name=profit,proto3" json:"profit,omitempty"`
	Equity               float64            `protobuf:"fixed64,17,opt,name=equity,proto3" json:"equity,omitempty"`
	Margin               float64            `protobuf:"fixed64,18,opt,name=margin,proto3" json:"margin,omitempty"`
	FreeMargin           float64            `protobuf:"fixed64,19,opt,name=free_margin,json=freeMargin,proto3" json:"free_margin,omitempty"`
	MarginLevel          float64            `protobuf:"fixed64,20,opt,name=margin_level,json=marginLevel,proto3" json:"margin_level,omitempty"`
	MarginCall           float64            `protobuf:"fixed64,21,opt,name=margin_call,json=marginCall,proto3" json:"margin_call,omitempty"`
	MarginStopout        float64            `protobuf:"fixed64,22,opt,name=margin_stopout,json=marginStopout,proto3" json:"margin_stopout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e28828dcb8d24f0, []int{0}
}

func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *Account) GetLogin() int32 {
	if m != nil {
		return m.Login
	}
	return 0
}

func (m *Account) GetTradeMode() AccountTradeMode {
	if m != nil {
		return m.TradeMode
	}
	return AccountTradeMode_ACCOUNT_TRADE_MODE_DEMO
}

func (m *Account) GetLeverage() int32 {
	if m != nil {
		return m.Leverage
	}
	return 0
}

func (m *Account) GetMarginMode() AccountMarginMode {
	if m != nil {
		return m.MarginMode
	}
	return AccountMarginMode_ACCOUNT_MARGIN_MODE_RETAIL_NETTING
}

func (m *Account) GetStopoutMode() AccountStopoutMode {
	if m != nil {
		return m.StopoutMode
	}
	return AccountStopoutMode_ACCOUNT_STOPOUT_MODE_PERCENT
}

func (m *Account) GetTradeAllowed() bool {
	if m != nil {
		return m.TradeAllowed
	}
	return false
}

func (m *Account) GetTradeExpert() bool {
	if m != nil {
		return m.TradeExpert
	}
	return false
}

func (m *Account) GetLimitOrders() int32 {
	if m != nil {
		return m.LimitOrders
	}
	return 0
}

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Account) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *Account) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Account) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *Account) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Account) GetCredit() float64 {
	if m != nil {
		return m.Credit
	}
	return 0
}

func (m *Account) GetProfit() float64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *Account) GetEquity() float64 {
	if m != nil {
		return m.Equity
	}
	return 0
}

func (m *Account) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *Account) GetFreeMargin() float64 {
	if m != nil {
		return m.FreeMargin
	}
	return 0
}

func (m *Account) GetMarginLevel() float64 {
	if m != nil {
		return m.MarginLevel
	}
	return 0
}

func (m *Account) GetMarginCall() float64 {
	if m != nil {
		return m.MarginCall
	}
	return 0
}

func (m *Account) GetMarginStopout() float64 {
	if m != nil {
		return m.MarginStopout
	}
	return 0
}

func init() {
	proto.RegisterEnum("mql5_background.v1.AccountTradeMode", AccountTradeMode_name, AccountTradeMode_value)
	proto.RegisterEnum("mql5_background.v1.AccountStopoutMode", AccountStopoutMode_name, AccountStopoutMode_value)
	proto.RegisterEnum("mql5_background.v1.AccountMarginMode", AccountMarginMode_name, AccountMarginMode_value)
	proto.RegisterType((*Account)(nil), "mql5_background.v1.Account")
}

func init() {
	proto.RegisterFile("account.proto", fileDescriptor_8e28828dcb8d24f0)
}

var fileDescriptor_8e28828dcb8d24f0 = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0xeb, 0x72, 0xd2, 0x40,
	0x14, 0x36, 0xbd, 0xd0, 0x72, 0x02, 0x98, 0xae, 0xb5, 0xee, 0xd4, 0x5b, 0xad, 0xb6, 0xe3, 0xf0,
	0x83, 0x19, 0x75, 0x7c, 0x80, 0x4c, 0x58, 0x29, 0x33, 0x24, 0xe9, 0x84, 0xd4, 0xd1, 0x5f, 0x99,
	0x90, 0x6c, 0x99, 0x8c, 0xb9, 0xd0, 0x25, 0x54, 0x79, 0x80, 0xbe, 0xb7, 0x7b, 0x49, 0xb0, 0x15,
	0xe5, 0x0f, 0xb3, 0xdf, 0xe5, 0x7c, 0x87, 0xdd, 0x73, 0x00, 0xda, 0x61, 0x14, 0x15, 0x8b, 0xbc,
	0xec, 0xcd, 0x58, 0x51, 0x16, 0x08, 0x65, 0x37, 0xe9, 0xe7, 0x60, 0x12, 0x46, 0x3f, 0xa6, 0x8c,
	0xd3, 0x71, 0xef, 0xf6, 0xc3, 0xe9, 0x5d, 0x03, 0xf6, 0x4c, 0xe5, 0x42, 0x2f, 0x01, 0xaa, 0x82,
	0x20, 0x89, 0xb1, 0x76, 0xa2, 0xbd, 0xdf, 0xf5, 0x9a, 0x15, 0x33, 0x8c, 0xd1, 0x21, 0xec, 0xa6,
	0xc5, 0x34, 0xc9, 0xf1, 0x96, 0x54, 0x14, 0x40, 0x16, 0x40, 0xc9, 0xc2, 0x98, 0x06, 0x59, 0x11,
	0x53, 0xbc, 0xcd, 0xa5, 0xce, 0xc7, 0x77, 0xbd, 0xf5, 0x4e, 0xbd, 0xaa, 0x8b, 0x2f, 0xcc, 0x36,
	0xf7, 0x7a, 0xcd, 0xb2, 0x3e, 0xa2, 0x63, 0xd8, 0x4f, 0xe9, 0x2d, 0x65, 0xe1, 0x94, 0xe2, 0x1d,
	0x99, 0xbe, 0xc2, 0xe8, 0x0b, 0xe8, 0x59, 0xc8, 0x78, 0x2b, 0xd5, 0x61, 0x57, 0x76, 0x38, 0xdb,
	0xd0, 0xc1, 0x96, 0x6e, 0xd9, 0x02, 0xb2, 0xd5, 0x19, 0x0d, 0xa1, 0x35, 0x2f, 0x8b, 0x59, 0xb1,
	0x28, 0x55, 0x50, 0x43, 0x06, 0x9d, 0x6f, 0x08, 0x1a, 0x2b, 0xbb, 0x4c, 0xd2, 0xe7, 0x7f, 0x00,
	0x7a, 0x0b, 0x6d, 0x75, 0xe7, 0x30, 0x4d, 0x8b, 0x9f, 0x34, 0xc6, 0x7b, 0x3c, 0x6b, 0xdf, 0x6b,
	0x49, 0xd2, 0x54, 0x1c, 0x7a, 0x03, 0x0a, 0x07, 0xf4, 0xd7, 0x8c, 0xb2, 0x12, 0xef, 0x4b, 0x8f,
	0x2e, 0x39, 0x22, 0x29, 0x61, 0x49, 0x93, 0x2c, 0x29, 0x83, 0x82, 0xc5, 0x94, 0xcd, 0x71, 0x53,
	0x5e, 0x5d, 0x97, 0x9c, 0x2b, 0x29, 0x84, 0x60, 0x27, 0x0f, 0x33, 0x8a, 0x81, 0x4b, 0x4d, 0x4f,
	0x9e, 0xd1, 0x11, 0x34, 0xe6, 0x94, 0xf1, 0xe7, 0xc1, 0xba, 0x64, 0x2b, 0x24, 0x5e, 0x31, 0x5a,
	0x30, 0x46, 0xf3, 0x68, 0x89, 0x5b, 0x52, 0x59, 0x61, 0x84, 0x61, 0x2f, 0x2a, 0xb2, 0x59, 0x98,
	0x2f, 0x71, 0x5b, 0x4a, 0x35, 0x14, 0xca, 0x24, 0x4c, 0xc3, 0x3c, 0xa2, 0xb8, 0xc3, 0x15, 0xcd,
	0xab, 0xa1, 0xe8, 0x13, 0x31, 0x1a, 0x27, 0x25, 0x7e, 0x2c, 0x85, 0x0a, 0x09, 0x9e, 0x2f, 0xd4,
	0x35, 0xe7, 0x0d, 0xc5, 0x2b, 0x24, 0x78, 0x7a, 0xb3, 0x48, 0xca, 0x25, 0x3e, 0x50, 0xbc, 0x42,
	0x82, 0x57, 0x73, 0xc0, 0x48, 0xf1, 0x0a, 0xa1, 0xd7, 0xa0, 0x5f, 0x33, 0xca, 0x37, 0x47, 0x89,
	0x4f, 0xa4, 0x08, 0x82, 0x52, 0x23, 0x14, 0xef, 0x53, 0x8d, 0x5e, 0x6c, 0x43, 0x8a, 0x0f, 0xa5,
	0xa3, 0x5a, 0x87, 0x91, 0xa0, 0x44, 0x46, 0x65, 0x89, 0xf8, 0x30, 0xf0, 0x53, 0x95, 0xa1, 0x28,
	0x8b, 0x33, 0xe8, 0x0c, 0x3a, 0x95, 0xa1, 0x9a, 0x20, 0x3e, 0x92, 0x9e, 0xb6, 0x62, 0xab, 0x19,
	0x77, 0x53, 0x30, 0xfe, 0x5e, 0x50, 0xf4, 0x1c, 0x9e, 0x99, 0x96, 0xe5, 0x5e, 0x39, 0x7e, 0xe0,
	0x7b, 0x66, 0x9f, 0x04, 0xb6, 0xcb, 0x3f, 0xfa, 0xc4, 0x76, 0x8d, 0x47, 0xe8, 0x15, 0x1c, 0xff,
	0x43, 0xb4, 0x5c, 0xc7, 0x27, 0x63, 0xdf, 0xd0, 0xfe, 0x53, 0xec, 0x11, 0x73, 0x64, 0x6c, 0x75,
	0xbf, 0x02, 0x5a, 0xdf, 0x31, 0x74, 0x02, 0x2f, 0xea, 0x92, 0xb1, 0xef, 0x5e, 0xba, 0x57, 0xbe,
	0x2a, 0xba, 0x24, 0x9e, 0x45, 0x1c, 0xff, 0x61, 0xd3, 0x07, 0x0e, 0xdb, 0x75, 0xc8, 0x77, 0x43,
	0xeb, 0xde, 0x69, 0x70, 0xb0, 0xf6, 0x2b, 0x40, 0xe7, 0x70, 0x5a, 0x57, 0xd9, 0xa6, 0x37, 0x18,
	0x3a, 0xf5, 0x77, 0xf1, 0xcd, 0xe1, 0x28, 0x70, 0x88, 0xef, 0x0f, 0x9d, 0x01, 0x4f, 0xbf, 0xd7,
	0xff, 0xbe, 0x8f, 0x7c, 0xb3, 0x2e, 0x4c, 0x67, 0x40, 0xf8, 0xa5, 0x36, 0x27, 0x5d, 0x90, 0xfe,
	0x40, 0x24, 0x6d, 0x4f, 0x1a, 0xf2, 0x0f, 0xe7, 0xd3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x15,
	0xb3, 0xa4, 0xe4, 0x81, 0x04, 0x00, 0x00,
}
