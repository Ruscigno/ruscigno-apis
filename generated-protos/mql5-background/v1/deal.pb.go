// Code generated by protoc-gen-go. DO NOT EDIT.
// source: deal.proto

package mql5_background_v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// DealType: Deal type
type DealType int32

const (
	DealType_DEAL_TYPE_BUY                      DealType = 0
	DealType_DEAL_TYPE_SELL                     DealType = 1
	DealType_DEAL_TYPE_BALANCE                  DealType = 2
	DealType_DEAL_TYPE_CREDIT                   DealType = 3
	DealType_DEAL_TYPE_CHARGE                   DealType = 4
	DealType_DEAL_TYPE_CORRECTION               DealType = 5
	DealType_DEAL_TYPE_BONUS                    DealType = 6
	DealType_DEAL_TYPE_COMMISSION               DealType = 7
	DealType_DEAL_TYPE_COMMISSION_DAILY         DealType = 8
	DealType_DEAL_TYPE_COMMISSION_MONTHLY       DealType = 9
	DealType_DEAL_TYPE_COMMISSION_AGENT_DAILY   DealType = 10
	DealType_DEAL_TYPE_COMMISSION_AGENT_MONTHLY DealType = 11
	DealType_DEAL_TYPE_INTEREST                 DealType = 12
	DealType_DEAL_TYPE_BUY_CANCELED             DealType = 13
	DealType_DEAL_TYPE_SELL_CANCELED            DealType = 14
	DealType_DEAL_DIVIDEND                      DealType = 15
	DealType_DEAL_DIVIDEND_FRANKED              DealType = 16
	DealType_DEAL_TAX                           DealType = 17
)

var DealType_name = map[int32]string{
	0:  "DEAL_TYPE_BUY",
	1:  "DEAL_TYPE_SELL",
	2:  "DEAL_TYPE_BALANCE",
	3:  "DEAL_TYPE_CREDIT",
	4:  "DEAL_TYPE_CHARGE",
	5:  "DEAL_TYPE_CORRECTION",
	6:  "DEAL_TYPE_BONUS",
	7:  "DEAL_TYPE_COMMISSION",
	8:  "DEAL_TYPE_COMMISSION_DAILY",
	9:  "DEAL_TYPE_COMMISSION_MONTHLY",
	10: "DEAL_TYPE_COMMISSION_AGENT_DAILY",
	11: "DEAL_TYPE_COMMISSION_AGENT_MONTHLY",
	12: "DEAL_TYPE_INTEREST",
	13: "DEAL_TYPE_BUY_CANCELED",
	14: "DEAL_TYPE_SELL_CANCELED",
	15: "DEAL_DIVIDEND",
	16: "DEAL_DIVIDEND_FRANKED",
	17: "DEAL_TAX",
}

var DealType_value = map[string]int32{
	"DEAL_TYPE_BUY":                      0,
	"DEAL_TYPE_SELL":                     1,
	"DEAL_TYPE_BALANCE":                  2,
	"DEAL_TYPE_CREDIT":                   3,
	"DEAL_TYPE_CHARGE":                   4,
	"DEAL_TYPE_CORRECTION":               5,
	"DEAL_TYPE_BONUS":                    6,
	"DEAL_TYPE_COMMISSION":               7,
	"DEAL_TYPE_COMMISSION_DAILY":         8,
	"DEAL_TYPE_COMMISSION_MONTHLY":       9,
	"DEAL_TYPE_COMMISSION_AGENT_DAILY":   10,
	"DEAL_TYPE_COMMISSION_AGENT_MONTHLY": 11,
	"DEAL_TYPE_INTEREST":                 12,
	"DEAL_TYPE_BUY_CANCELED":             13,
	"DEAL_TYPE_SELL_CANCELED":            14,
	"DEAL_DIVIDEND":                      15,
	"DEAL_DIVIDEND_FRANKED":              16,
	"DEAL_TAX":                           17,
}

func (x DealType) String() string {
	return proto.EnumName(DealType_name, int32(x))
}

func (DealType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_26fe74684e4960c8, []int{0}
}

// DealEntry: Deal entry - entry in, entry out, reverse
type DealEntry int32

const (
	DealEntry_DEAL_ENTRY_IN     DealEntry = 0
	DealEntry_DEAL_ENTRY_OUT    DealEntry = 1
	DealEntry_DEAL_ENTRY_INOUT  DealEntry = 2
	DealEntry_DEAL_ENTRY_OUT_BY DealEntry = 3
)

var DealEntry_name = map[int32]string{
	0: "DEAL_ENTRY_IN",
	1: "DEAL_ENTRY_OUT",
	2: "DEAL_ENTRY_INOUT",
	3: "DEAL_ENTRY_OUT_BY",
}

var DealEntry_value = map[string]int32{
	"DEAL_ENTRY_IN":     0,
	"DEAL_ENTRY_OUT":    1,
	"DEAL_ENTRY_INOUT":  2,
	"DEAL_ENTRY_OUT_BY": 3,
}

func (x DealEntry) String() string {
	return proto.EnumName(DealEntry_name, int32(x))
}

func (DealEntry) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_26fe74684e4960c8, []int{1}
}

// Deal: A deal is the reflection of the fact of a trade operation execution based on an order that contains a trade request
type Deal struct {
	OrderId              int32                `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	AccountId            int32                `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	DealNumber           int32                `protobuf:"varint,3,opt,name=deal_number,json=dealNumber,proto3" json:"deal_number,omitempty"`
	Ticket               int32                `protobuf:"varint,4,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Magic                int32                `protobuf:"varint,5,opt,name=magic,proto3" json:"magic,omitempty"`
	Order                int32                `protobuf:"varint,6,opt,name=order,proto3" json:"order,omitempty"`
	Symbol               string               `protobuf:"bytes,7,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,8,opt,name=time,proto3" json:"time,omitempty"`
	DealType             DealType             `protobuf:"varint,9,opt,name=deal_type,json=dealType,proto3,enum=mql5_background.v1.DealType" json:"deal_type,omitempty"`
	Entry                DealEntry            `protobuf:"varint,10,opt,name=entry,proto3,enum=mql5_background.v1.DealEntry" json:"entry,omitempty"`
	PositionId           int32                `protobuf:"varint,11,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	Volume               float64              `protobuf:"fixed64,12,opt,name=volume,proto3" json:"volume,omitempty"`
	Price                float64              `protobuf:"fixed64,13,opt,name=price,proto3" json:"price,omitempty"`
	Commission           float64              `protobuf:"fixed64,14,opt,name=commission,proto3" json:"commission,omitempty"`
	Swap                 float64              `protobuf:"fixed64,15,opt,name=swap,proto3" json:"swap,omitempty"`
	Profit               float64              `protobuf:"fixed64,16,opt,name=profit,proto3" json:"profit,omitempty"`
	Comment              string               `protobuf:"bytes,17,opt,name=comment,proto3" json:"comment,omitempty"`
	ExternalId           string               `protobuf:"bytes,18,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Deal) Reset()         { *m = Deal{} }
func (m *Deal) String() string { return proto.CompactTextString(m) }
func (*Deal) ProtoMessage()    {}
func (*Deal) Descriptor() ([]byte, []int) {
	return fileDescriptor_26fe74684e4960c8, []int{0}
}

func (m *Deal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deal.Unmarshal(m, b)
}
func (m *Deal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deal.Marshal(b, m, deterministic)
}
func (m *Deal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deal.Merge(m, src)
}
func (m *Deal) XXX_Size() int {
	return xxx_messageInfo_Deal.Size(m)
}
func (m *Deal) XXX_DiscardUnknown() {
	xxx_messageInfo_Deal.DiscardUnknown(m)
}

var xxx_messageInfo_Deal proto.InternalMessageInfo

func (m *Deal) GetOrderId() int32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *Deal) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *Deal) GetDealNumber() int32 {
	if m != nil {
		return m.DealNumber
	}
	return 0
}

func (m *Deal) GetTicket() int32 {
	if m != nil {
		return m.Ticket
	}
	return 0
}

func (m *Deal) GetMagic() int32 {
	if m != nil {
		return m.Magic
	}
	return 0
}

func (m *Deal) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Deal) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Deal) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Deal) GetDealType() DealType {
	if m != nil {
		return m.DealType
	}
	return DealType_DEAL_TYPE_BUY
}

func (m *Deal) GetEntry() DealEntry {
	if m != nil {
		return m.Entry
	}
	return DealEntry_DEAL_ENTRY_IN
}

func (m *Deal) GetPositionId() int32 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

func (m *Deal) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Deal) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Deal) GetCommission() float64 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *Deal) GetSwap() float64 {
	if m != nil {
		return m.Swap
	}
	return 0
}

func (m *Deal) GetProfit() float64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *Deal) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Deal) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func init() {
	proto.RegisterEnum("mql5_background.v1.DealType", DealType_name, DealType_value)
	proto.RegisterEnum("mql5_background.v1.DealEntry", DealEntry_name, DealEntry_value)
	proto.RegisterType((*Deal)(nil), "mql5_background.v1.Deal")
}

func init() {
	proto.RegisterFile("deal.proto", fileDescriptor_26fe74684e4960c8)
}

var fileDescriptor_26fe74684e4960c8 = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0x5d, 0x53, 0xd3, 0x40,
	0x14, 0xb5, 0xf4, 0xfb, 0x16, 0xca, 0x76, 0x05, 0x5c, 0x2b, 0x08, 0xc3, 0x38, 0x8e, 0xc3, 0x43,
	0x18, 0x61, 0x7c, 0xf0, 0x31, 0x34, 0x2b, 0x64, 0x2c, 0xa9, 0xb3, 0x0d, 0x8e, 0x7d, 0xca, 0xb4,
	0x49, 0xe8, 0x64, 0x68, 0x9a, 0x9a, 0xa6, 0x28, 0xbf, 0xcb, 0x7f, 0xe3, 0xaf, 0xf1, 0xee, 0xa6,
	0x69, 0x0b, 0x56, 0xdf, 0x7a, 0xcf, 0x39, 0xf7, 0xee, 0xb9, 0xe7, 0x36, 0x00, 0x9e, 0xdf, 0x1f,
	0x69, 0x93, 0x38, 0x4a, 0x22, 0x4a, 0xc3, 0xef, 0xa3, 0x0f, 0xce, 0xa0, 0xef, 0xde, 0x0d, 0xe3,
	0x68, 0x36, 0xf6, 0xb4, 0xfb, 0xf7, 0xcd, 0xc3, 0x61, 0x14, 0x0d, 0x47, 0xfe, 0xa9, 0x52, 0x0c,
	0x66, 0xb7, 0xa7, 0x49, 0x10, 0xfa, 0xd3, 0xa4, 0x1f, 0x4e, 0xd2, 0xa6, 0xe3, 0x5f, 0x05, 0x28,
	0x18, 0x38, 0x83, 0xbe, 0x84, 0x4a, 0x14, 0x7b, 0x7e, 0xec, 0x04, 0x1e, 0xcb, 0x1d, 0xe5, 0xde,
	0x15, 0x45, 0x59, 0xd5, 0xa6, 0x47, 0x0f, 0x00, 0xfa, 0xae, 0x8b, 0x23, 0x13, 0x49, 0x6e, 0x28,
	0xb2, 0x3a, 0x47, 0x90, 0x3e, 0x84, 0x9a, 0x74, 0xe1, 0x8c, 0x67, 0xe1, 0xc0, 0x8f, 0x59, 0x5e,
	0xf1, 0xca, 0x98, 0xa5, 0x10, 0xba, 0x07, 0xa5, 0x24, 0x70, 0xef, 0xfc, 0x84, 0x15, 0x14, 0x37,
	0xaf, 0xe8, 0x0e, 0x14, 0xc3, 0xfe, 0x30, 0x70, 0x59, 0x51, 0xc1, 0x69, 0x21, 0x51, 0xf5, 0x30,
	0x2b, 0xa5, 0xa8, 0x2a, 0xe4, 0x8c, 0xe9, 0x43, 0x38, 0x88, 0x46, 0xac, 0x8c, 0x70, 0x55, 0xcc,
	0x2b, 0xaa, 0x41, 0x41, 0xae, 0xc4, 0x2a, 0x88, 0xd6, 0xce, 0x9a, 0x5a, 0xba, 0xaf, 0x96, 0xed,
	0xab, 0xd9, 0xd9, 0xbe, 0x42, 0xe9, 0xe8, 0x47, 0xa8, 0x2a, 0xb3, 0xc9, 0xc3, 0xc4, 0x67, 0x55,
	0x6c, 0xaa, 0x9f, 0xed, 0x6b, 0x7f, 0x07, 0xa7, 0xc9, 0x4c, 0x6c, 0xd4, 0x88, 0x8a, 0x37, 0xff,
	0x45, 0xcf, 0xa1, 0xe8, 0x8f, 0x93, 0xf8, 0x81, 0x81, 0x6a, 0x3b, 0xf8, 0x57, 0x1b, 0x97, 0x22,
	0x91, 0x6a, 0x65, 0x38, 0x93, 0x68, 0x1a, 0x24, 0x41, 0x34, 0x96, 0xe1, 0xd5, 0xd2, 0x70, 0x32,
	0x08, 0xd3, 0xc3, 0xc5, 0xee, 0xa3, 0xd1, 0x0c, 0x57, 0xd8, 0x44, 0x2e, 0x27, 0xe6, 0x95, 0x8c,
	0x61, 0x12, 0x07, 0xae, 0xcf, 0xb6, 0x14, 0x9c, 0x16, 0xf4, 0x35, 0x80, 0x1b, 0x85, 0x61, 0x30,
	0x9d, 0x62, 0x37, 0xab, 0x2b, 0x6a, 0x05, 0xa1, 0x14, 0x0a, 0xd3, 0x1f, 0xfd, 0x09, 0xdb, 0x56,
	0x8c, 0xfa, 0x2d, 0x5f, 0xc0, 0x38, 0x6e, 0x83, 0x84, 0x91, 0xf4, 0x85, 0xb4, 0xa2, 0x0c, 0xca,
	0xb2, 0x13, 0x7d, 0xb2, 0x86, 0xca, 0x34, 0x2b, 0xa5, 0x69, 0xff, 0x67, 0xe2, 0xc7, 0x63, 0x0c,
	0x0a, 0x4d, 0x53, 0xc5, 0x42, 0x06, 0x99, 0xde, 0xc9, 0xef, 0x3c, 0x54, 0xb2, 0x84, 0x68, 0x03,
	0xb6, 0x0c, 0xae, 0xb7, 0x1d, 0xbb, 0xf7, 0x85, 0x3b, 0x17, 0x37, 0x3d, 0xf2, 0x0c, 0x6d, 0xd4,
	0x97, 0x50, 0x97, 0xb7, 0xdb, 0x24, 0x47, 0x77, 0xa1, 0xb1, 0x22, 0xd3, 0xdb, 0xba, 0xd5, 0xe2,
	0x64, 0x03, 0xf7, 0x24, 0x4b, 0xb8, 0x25, 0xb8, 0x61, 0xda, 0x24, 0xff, 0x04, 0xbd, 0xd2, 0xc5,
	0x25, 0x27, 0x05, 0x74, 0xbc, 0xb3, 0x82, 0x76, 0x84, 0xe0, 0x2d, 0xdb, 0xec, 0x58, 0xa4, 0x48,
	0x9f, 0xc3, 0xf6, 0xca, 0xf0, 0x8e, 0x75, 0xd3, 0x25, 0xa5, 0xa7, 0xf2, 0xeb, 0x6b, 0xb3, 0xdb,
	0x95, 0xf2, 0x32, 0xc6, 0xd8, 0x5c, 0xc7, 0x38, 0x86, 0x6e, 0xb6, 0x7b, 0xa4, 0x42, 0x8f, 0x60,
	0x7f, 0x2d, 0x7f, 0xdd, 0xb1, 0xec, 0x2b, 0x54, 0x54, 0xe9, 0x1b, 0x38, 0x5a, 0xab, 0xd0, 0x2f,
	0xb9, 0x65, 0xcf, 0xe7, 0x00, 0x7d, 0x0b, 0xc7, 0xff, 0x51, 0x65, 0xd3, 0x6a, 0x78, 0x22, 0xba,
	0xd4, 0x99, 0x96, 0xcd, 0x05, 0xef, 0xda, 0x64, 0x93, 0x36, 0x61, 0xef, 0x51, 0xb4, 0x4e, 0x4b,
	0xa6, 0xd6, 0xe6, 0x06, 0xd9, 0xa2, 0xaf, 0xe0, 0xc5, 0xe3, 0x8c, 0x97, 0x64, 0x7d, 0x71, 0x13,
	0xc3, 0xfc, 0x6a, 0x1a, 0xdc, 0x32, 0xc8, 0x36, 0x7e, 0xe0, 0xbb, 0x8f, 0x20, 0xe7, 0x93, 0xd0,
	0xad, 0xcf, 0xa8, 0x26, 0x74, 0x13, 0xaf, 0xa9, 0x46, 0xe9, 0xdf, 0x48, 0xe3, 0xc4, 0x81, 0xea,
	0xe2, 0x6f, 0xbc, 0x18, 0x84, 0x7e, 0x45, 0x0f, 0xad, 0xad, 0x1c, 0x37, 0x85, 0x3a, 0x37, 0x36,
	0x1e, 0x37, 0xbb, 0x57, 0x26, 0x93, 0xe8, 0xc6, 0xe2, 0xe4, 0x0b, 0xa5, 0x73, 0xd1, 0x23, 0xf9,
	0x41, 0x49, 0x7d, 0x9d, 0xe7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xae, 0xf1, 0xbd, 0x1d, 0xbd,
	0x04, 0x00, 0x00,
}
